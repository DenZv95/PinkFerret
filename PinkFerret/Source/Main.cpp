#include <iostream> 
#include <SFML/Graphics.hpp>
#include "Player.h"
#include "Zombie.h"
#include "map.h"

using namespace sf;
int main()
{
	RenderWindow window(sf::VideoMode(1280, 1024), "Game");
	float dX = 0;
	float dY = 0;

	int tempX = 0;//временная коорд Х.Снимаем ее после нажатия прав клав мыши
	int tempY = 0;//коорд Y
	float distance = 0;//это расстояние от объекта до тыка курсора

	Clock clock;
	bool stop = true;
	Player player(300, 300);

	Zombie zombie(600, 300);
	Sprite sp, zm;
	
	Image map_image;
	map_image.loadFromFile("Media/map.png");
	Texture map;//текстура карты
	map.loadFromImage(map_image);//заряжаем текстуру картинкой
	Sprite s_map;//создаём спрайт для карты
	s_map.setTexture(map);//заливаем текстуру спрайтом

	while (window.isOpen())
	{

		float time = clock.getElapsedTime().asMicroseconds();
		clock.restart();
		time = time / 800;

		Vector2i pixelPos = Mouse::getPosition(window);//забираем коорд курсора
		Vector2f pos = window.mapPixelToCoords(pixelPos);//переводим их в игровые (уходим от коорд окна)

		sf::Event event;
		while (window.pollEvent(event))
		{
			if (event.type == sf::Event::Closed)
				window.close();

			if (event.type == Event::MouseButtonPressed)//если нажата клавиша мыши
				if (event.key.code == Mouse::Left) {//а именно левая
					if (zombie.Move.getGlobalBounds().contains(pos.x, pos.y))//и при этом координата курсора попадает в спрайт
					{
						//p.sprite.setColor(Color::Green);//красим спрайт в зеленый,тем самым говоря игроку,что он выбрал персонажа и может сделать ход
						zombie.Move.isSelect = true;
					}
				}

			if (zombie.Move.isSelect)//если выбрали объект
				if (event.type == Event::MouseButtonPressed)//если нажата клавиша мыши
					if (event.key.code == Mouse::Right) {//а именно правая
						zombie.Move.isMove = true;//то начинаем движение
						zombie.Move.isSelect = false;//объект уже не выбран
						//zombie.Move.setColor(Color::White);//возвращаем обычный цвет спрайту
						tempX = pos.x;//забираем координату нажатия курсора Х
						tempY = pos.y;//и Y
					}
		}

		if (zombie.Move.isMove) {
			distance = sqrt((tempX - zombie.Move.x) * (tempX - zombie.Move.x) + (tempY - zombie.Move.y) * (tempY - zombie.Move.y));//считаем дистанцию (расстояние от точки А до точки Б). используя формулу длины вектора

			if (distance > 2) {//этим условием убираем дергание во время конечной позиции спрайта

				zombie.Move.x += 0.1 * time * (tempX - zombie.Move.x) / distance;//идем по иксу с помощью вектора нормали
				zombie.Move.y += 0.1 * time * (tempY - zombie.Move.y) / distance;//идем по игреку так же
			}
			else { zombie.Move.isMove = false; std::cout << "priehali\n"; }//говорим что уже никуда не идем и выводим веселое сообщение в консоль
		}

		//player
		if (Keyboard::isKeyPressed(Keyboard::A)) {
			player.Move(-0.12f, 0.f, time);
		}

		if (Keyboard::isKeyPressed(Keyboard::D)) {
			player.Move(0.12, 0, time);
		}

		if (Keyboard::isKeyPressed(Keyboard::W)) {
			player.Move(0, -0.12, time);
		}

		if (Keyboard::isKeyPressed(Keyboard::S)) {
			player.Move(0, 0.12, time);
		}


		if (Mouse::isButtonPressed(Mouse::Left)) {
			player.Shoot();
		}

		if (Mouse::isButtonPressed(Mouse::Right)) {
			player.Meleeattack();
		}

		if (Keyboard::isKeyPressed(Keyboard::R)) {
			player.Reload();
		}

		//zombie
		if (Keyboard::isKeyPressed(Keyboard::Left)) {
			zombie.Move(-0.12f, 0.f, time);
		}

		if (Keyboard::isKeyPressed(Keyboard::Right)) {
			zombie.Move(0.12, 0, time);
		}

		if (Keyboard::isKeyPressed(Keyboard::Up)) {
			zombie.Move(0, -0.12, time);
		}

		if (Keyboard::isKeyPressed(Keyboard::Down)) {
			zombie.Move(0, 0.12, time);
		}

		if (Mouse::isButtonPressed(Mouse::Right)) {
			zombie.Meleeattack();
		}

		player.update(time, pos);//оживляем объект p класса Player с помощью времени sfml, передавая время в качестве параметра функции update. благодаря этому персонаж может двигаться
		
		zombie.update(time, pos);//оживляем объект p класса Player с помощью времени sfml, передавая время в качестве параметра функции update. благодаря этому персонаж может двигаться

		window.clear();

		/////////////////////////////Рисуем карту/////////////////////
		for (int i = 0; i < HEIGHT_MAP; i++)
			for (int j = 0; j < WIDTH_MAP; j++)
			{
				if (TileMap[i][j] == ' ')  s_map.setTextureRect(IntRect(0, 0, 32, 32)); //если встретили символ пробел, то рисуем 1й квадратик
				if (TileMap[i][j] == 's')  s_map.setTextureRect(IntRect(32, 0, 32, 32));//если встретили символ s, то рисуем 2й квадратик
				if ((TileMap[i][j] == '0')) s_map.setTextureRect(IntRect(64, 0, 32, 32));//если встретили символ 0, то рисуем 3й квадратик


				s_map.setPosition(j * 32, i * 32);//по сути раскидывает квадратики, превращая в карту. то есть задает каждому из них позицию. если убрать, то вся карта нарисуется в одном квадрате 32*32 и мы увидим один квадрат

				window.draw(s_map);//рисуем квадратики на экран
			}
		/////////////////////////////Рисуем карту/////////////////////
		sp = player.getSprite();
		zm = zombie.getSprite();
		window.draw(sp);//рисуем спрайт объекта p класса player
		window.draw(zm);//рисуем спрайт объекта p класса player
		window.setView(player.getViev());
		window.display();

	}

	return 0;
}